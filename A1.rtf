{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red102\green116\blue123;\red160\green130\blue189;\red103\green140\blue177;\red0\green0\blue0;\red224\green226\blue228;\red232\green226\blue183;\red255\green205\blue34;\red236\green118\blue0;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title A1.rtf}}

\deflang1033\pard\plain\f0\fs20 \cf0\i /* Armazenar informacoes de veiculos
\par - No maximo 10 veiculos
\par marca do veiculo
\par modelo - 
\par ano de fabricacao
\par placa (formato XXX-YYYY; onde X denota as letras e Y denota os numeros da placa).
\par 
\par /*
\par Atividade A1
\par Aluno: Fábio Luiz dos Santos
\par Disciplina: Técnicas de programação
\par Editor/Compilador: DEV C++ 5.11
\par 
\par ===========Funcionalidades===========================
\par -Listar os veiculos cadastrados;
\par -Inserir um novo veiculo;
\par -Listar os veiculos filtrando-se por ano de fabricacao;
\par -Listar os veiculos com o ano de fabricacao acima de um certo valor especificado pelo usuario. 
\par - Listar os veiculos filtrando-se pelo modelo.
\par 
\par Obs: O sistema devera armazenar os veiculos ordenados pelo ano de fabricacao, ou seja, 
\par ao inserir um novo veiculo, este deve ser inserido em ordem crescente de ano de fabricacao.
\par 
\par Funcoes: 
\par - insert
\par - list
\par - listByYear
\par - listByFilter
\par - sort
\par - populate
\par - menu
\par 
\par */
\par 
\par 
\par 
\par \i0\cf1 #include <stdio.h>
\par #include <stdlib.h>
\par #include <locale.h> \cf0\i //colocar acentuacao no prompt
\par \i0\cf1 #include <stdbool.h>
\par #include <string.h>
\par #include <conio.h>
\par #include <ctype.h>
\par 
\par \cf0\i //Structs
\par //Chamado aqui de dados heterogeeos
\par 
\par //Variï¿½vel auxiliar de indice
\par \i0\cf2 int\cf3  \cf4 i\cf5 =\cf6 0\cf5 ;
\par \cf2 int\cf3  \cf4 j\cf5 =\cf6 0\cf5 ;
\par \cf2 int\cf3  \cf4 num\cf5 =\cf6 10\cf5 ;
\par \cf2 int\cf3  \cf4 close\cf5 =\cf6 0\cf5 ;
\par \cf2 int\cf3  \cf4 countVehicle\cf5 =\cf6 0\cf5 ;
\par \cf2 int\cf3  \cf4 opcao\cf5 ;
\par \cf2 int\cf3  \cf4 ano\cf5 ;
\par \cf2 char\cf3  \cf4 modelo\cf5 [\cf6 50\cf5 ]=\cf7 ""\cf5 ;
\par \cf2 int\cf3  \cf4 modelSelect\cf5 =\cf6 0\cf5 ;
\par \cf0\i /*Criando a struct vehicle*/
\par \i0\cf2 struct\cf3  \cf4 vehicle\cf5 \{
\par \cf3 	\cf2 char\cf3  \cf4 brand\cf5 [\cf6 50\cf5 ];\cf3 		\cf0\i //Marca do carro
\par \i0\cf3 	\cf2 char\cf3  \cf4 model\cf5 [\cf6 50\cf5 ];\cf3 		\cf0\i //modelo do carro
\par \i0\cf3 	\cf2 int\cf3  \cf4 year\cf5 ;\cf3 			\cf0\i //Ano de fabricacao
\par \i0\cf3 	\cf2 char\cf3  \cf4 plate\cf5 [\cf6 9\cf5 ];\cf3 		\cf0\i //Placa do carro
\par \i0\cf5 \};
\par 
\par \cf2 struct\cf3  \cf4 vehicle\cf3  \cf4 veiculo\cf5 [\cf6 10\cf5 ];\cf3 			\cf0\i //Criando um array de structs 
\par \i0\cf2 struct\cf3  \cf4 vehicle\cf3  \cf4 veiculoOrdenado\cf5 [\cf6 10\cf5 ];\cf3 	\cf0\i //Criando um array de structs ordenada
\par \i0\cf2 struct\cf3  \cf4 vehicle\cf3  \cf4 temp\cf5 [\cf6 1\cf5 ];
\par 
\par \cf0\i /*
\par char toUpperString(char stringParaMaiuscula[])
\par \{
\par 	for (i=0;i=strlen(stringParaMaiuscula[]);i++)
\par 	\{
\par 		stringParaMaiuscula[i] = toupper (stringParaMaiuscula[i]);
\par 	\}
\par 	return stringParaMaiuscula;
\par \}
\par */
\par 
\par \i0\cf2 bool\cf3  \cf4 insert\cf5 (\cf2 void\cf5 )\{\cf3 				\cf0\i //funcao para insercao de um novo veiculo
\par \i0\cf3 	\cf0\i //	insere um novo veiculo e incrementa countVehicle
\par \i0\cf3 	\cf2 if\cf3  \cf5 (\cf4 countVehicle\cf3  \cf5 <\cf3  \cf6 10\cf5 )
\par \cf3 	\cf5 \{
\par \cf3 		\cf4 i\cf3  \cf5 =\cf3  \cf4 countVehicle\cf5 ;
\par \cf3 		\cf0\i //
\par \i0\cf3 		\cf4 printf\cf3  \cf5 (\cf7 "\\n==== Cadastro de veiculo ====\\n"\cf5 );
\par \cf3 		
\par 		\cf4 printf\cf3  \cf5 (\cf7 "Fabricante: "\cf5 );
\par \cf3 		\cf0\i //fflush stdin para ler o teclado e fgets() para atribuir na string
\par \i0\cf3 		\cf4 fflush\cf5 (\cf4 stdin\cf5 );
\par \cf3 		\cf4 fgets\cf5 (\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 brand\cf5 ,\cf6 50\cf5 ,\cf4 stdin\cf5 );
\par \cf3 		\cf0\i //veiculo[i].brand = toupper(veiculo[i].brand);	//Deixa tudo em maiusculas
\par \i0\cf3 		\cf0\i //veiculo[i].brand = toUpperString(veiculo[i].brand);
\par \i0\cf3 		
\par 		\cf4 printf\cf5 (\cf7 "Modelo: "\cf5 );
\par \cf3 		\cf0\i //fflush stdin para ler o teclado e fgets() para atribuir na string
\par \i0\cf3 		\cf4 fflush\cf5 (\cf4 stdin\cf5 );
\par \cf3 		\cf4 fgets\cf5 (\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 model\cf5 ,\cf6 50\cf5 ,\cf4 stdin\cf5 );
\par \cf3 		\cf0\i //veiculo[i].model = toupper(veiculo[i].model);	//Deixa tudo em maiusculas
\par \i0\cf3 		
\par 		\cf4 printf\cf5 (\cf7 "Ano: "\cf5 );
\par \cf3 		\cf4 scanf\cf5 (\cf7 "%d"\cf5 ,\cf3  \cf5 &\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 year\cf5 );
\par \cf3 		
\par 		\cf4 printf\cf5 (\cf7 "Placa (formato XXX-YYYY) : "\cf5 );
\par \cf3 		\cf0\i //fflush stdin para ler o teclado e fgets() para atribuir na string
\par \i0\cf3 		\cf4 fflush\cf5 (\cf4 stdin\cf5 );
\par \cf3 		\cf4 fgets\cf5 (\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 plate\cf5 ,\cf6 9\cf5 ,\cf4 stdin\cf5 );
\par \cf3 		\cf0\i //
\par \i0\cf3 		\cf4 sortList\cf5 ();
\par \cf3 		\cf0\i //
\par \i0\cf3 		\cf4 countVehicle\cf5 ++;
\par \cf3 		\cf0\i //
\par \i0\cf3 		\cf4 printf\cf3  \cf5 (\cf7 "\\n Veiculo %d inserido com sucesso\\n"\cf5 ,\cf4 countVehicle\cf5 );
\par \cf3 		\cf0\i //
\par \i0\cf3 	\cf5 \}
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf2 return\cf3  \cf5 (\cf6 0\cf5 );
\par \}
\par 
\par \cf2 void\cf3  \cf4 list\cf5 (\cf2 void\cf5 )\{
\par \cf3 	\cf4 printf\cf5 (\cf7 "\\n === IMPRIMINDO ===\\n"\cf5 );
\par \cf3 	\cf2 for\cf3  \cf5 (\cf4 i\cf5 =\cf6 0\cf5 ;\cf4 i\cf5 <\cf6 10\cf5 ;\cf4 i\cf5 ++)\{
\par 
\par \cf3 		\cf4 printf\cf5 (\cf7 "\\n===== Veiculo %d =====\\n"\cf5 ,\cf4 i\cf5 +\cf6 1\cf5 );
\par \cf3 		\cf4 printf\cf5 (\cf7 "\\n Fabricante : %s"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 brand\cf5 );
\par \cf3 		\cf4 printf\cf5 (\cf7 "\\n Modelo : %s"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 model\cf5 );
\par \cf3 		\cf4 printf\cf5 (\cf7 "\\n Ano : %d"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 year\cf5 );
\par \cf3 		\cf4 printf\cf5 (\cf7 "\\n Placa : %s\\n"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 plate\cf5 );
\par 
\par \cf3 		\cf4 getch\cf5 ();
\par \cf3 	\cf5 \}
\par \cf3 	\cf4 getch\cf5 ();
\par 
\par \}
\par 
\par \cf2 void\cf3  \cf4 sortList\cf5 (\cf2 void\cf5 )\{
\par 
\par \cf3 	
\par \cf0\i /* Inicio do Bubble sort */
\par \i0\cf3 	\cf2 for\cf3  \cf5 (\cf4 i\cf3  \cf5 =\cf3  \cf6 0\cf5 ;\cf3  \cf4 i\cf3  \cf5 <\cf3  \cf4 num\cf5 ;\cf3  \cf4 i\cf5 ++)
\par \cf3 	\cf5 \{
\par \cf3 			\cf2 for\cf3  \cf5 (\cf4 j\cf3  \cf5 =\cf3  \cf6 0\cf5 ;\cf3  \cf4 j\cf3  \cf5 <\cf3  \cf5 (\cf4 num\cf3  \cf5 -\cf3  \cf4 i\cf3  \cf5 -\cf3  \cf6 1\cf5 );\cf3  \cf4 j\cf5 ++)
\par \cf3 			\cf5 \{
\par \cf3 				\cf2 if\cf3  \cf5 (\cf4 veiculo\cf5 [\cf4 j\cf5 ].\cf4 year\cf3  \cf5 >\cf3  \cf4 veiculo\cf5 [\cf4 j\cf3  \cf5 +\cf3  \cf6 1\cf5 ].\cf4 year\cf5 )
\par \cf3 				\cf5 \{
\par \cf3 					\cf4 temp\cf5 [\cf6 0\cf5 ]=\cf3  \cf4 veiculo\cf5 [\cf4 j\cf5 ];
\par \cf3 					\cf4 veiculo\cf5 [\cf4 j\cf5 ]\cf3  \cf5 =\cf3  \cf4 veiculo\cf5 [\cf4 j\cf3  \cf5 +\cf3  \cf6 1\cf5 ];
\par \cf3 					\cf4 veiculo\cf5 [\cf4 j\cf3  \cf5 +\cf3  \cf6 1\cf5 ]\cf3  \cf5 =\cf3  \cf4 temp\cf5 [\cf6 0\cf5 ];
\par \cf3 				\cf5 \}
\par \cf3 			\cf5 \}
\par \cf3 	\cf5 \}
\par \cf3 		
\par \cf5 \}
\par 
\par \cf2 void\cf3  \cf4 populate\cf5 (\cf2 void\cf5 )
\par \{
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 0\cf5 ].\cf4 brand\cf5 ,\cf7 "FIAT"\cf5 );
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 0\cf5 ].\cf4 model\cf5 ,\cf7 "UNO"\cf5 );
\par \cf3 	\cf4 veiculo\cf5 [\cf6 0\cf5 ].\cf4 year\cf5 =\cf6 1992\cf5 ;
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 0\cf5 ].\cf4 plate\cf5 ,\cf7 "ABC-1234"\cf5 );
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 sortList\cf5 ();
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 1\cf5 ].\cf4 brand\cf5 ,\cf7 "VW"\cf5 );
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 1\cf5 ].\cf4 model\cf5 ,\cf7 "GOL"\cf5 );
\par \cf3 	\cf4 veiculo\cf5 [\cf6 1\cf5 ].\cf4 year\cf5 =\cf6 1991\cf5 ;
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 1\cf5 ].\cf4 plate\cf5 ,\cf7 "YKJ-1254"\cf5 );
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 sortList\cf5 ();
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 2\cf5 ].\cf4 brand\cf5 ,\cf7 "JEEP"\cf5 );
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 2\cf5 ].\cf4 model\cf5 ,\cf7 "WILLIS"\cf5 );
\par \cf3 	\cf4 veiculo\cf5 [\cf6 2\cf5 ].\cf4 year\cf5 =\cf6 1965\cf5 ;
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 2\cf5 ].\cf4 plate\cf5 ,\cf7 "OLD-1965"\cf5 );
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 sortList\cf5 ();
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 3\cf5 ].\cf4 brand\cf5 ,\cf7 "FIAT"\cf5 );
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 3\cf5 ].\cf4 model\cf5 ,\cf7 "TORO"\cf5 );
\par \cf3 	\cf4 veiculo\cf5 [\cf6 3\cf5 ].\cf4 year\cf5 =\cf6 2020\cf5 ;
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 3\cf5 ].\cf4 plate\cf5 ,\cf7 "GMH-8753"\cf5 );
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 sortList\cf5 ();
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 4\cf5 ].\cf4 brand\cf5 ,\cf7 "GM"\cf5 );
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 4\cf5 ].\cf4 model\cf5 ,\cf7 "VECTRA"\cf5 );
\par \cf3 	\cf4 veiculo\cf5 [\cf6 4\cf5 ].\cf4 year\cf5 =\cf6 2016\cf5 ;
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 4\cf5 ].\cf4 plate\cf5 ,\cf7 "KMF-8264"\cf5 );
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 sortList\cf5 ();
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 5\cf5 ].\cf4 brand\cf5 ,\cf7 "VW"\cf5 );
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 5\cf5 ].\cf4 model\cf5 ,\cf7 "FOX"\cf5 );
\par \cf3 	\cf4 veiculo\cf5 [\cf6 5\cf5 ].\cf4 year\cf5 =\cf6 2015\cf5 ;
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 5\cf5 ].\cf4 plate\cf5 ,\cf7 "EBM-7842"\cf5 );
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 sortList\cf5 ();
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 6\cf5 ].\cf4 brand\cf5 ,\cf7 "FORD"\cf5 );
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 6\cf5 ].\cf4 model\cf5 ,\cf7 "KA"\cf5 );
\par \cf3 	\cf4 veiculo\cf5 [\cf6 6\cf5 ].\cf4 year\cf5 =\cf6 2018\cf5 ;
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 6\cf5 ].\cf4 plate\cf5 ,\cf7 "FTN-7887"\cf5 );
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 sortList\cf5 ();
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 7\cf5 ].\cf4 brand\cf5 ,\cf7 "FORD"\cf5 );
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 7\cf5 ].\cf4 model\cf5 ,\cf7 "FIESTA"\cf5 );
\par \cf3 	\cf4 veiculo\cf5 [\cf6 7\cf5 ].\cf4 year\cf5 =\cf6 2014\cf5 ;
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 7\cf5 ].\cf4 plate\cf5 ,\cf7 "EBM-4584"\cf5 );
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 sortList\cf5 ();
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 8\cf5 ].\cf4 brand\cf5 ,\cf7 "FIAT"\cf5 );
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 8\cf5 ].\cf4 model\cf5 ,\cf7 "MOBI"\cf5 );
\par \cf3 	\cf4 veiculo\cf5 [\cf6 8\cf5 ].\cf4 year\cf5 =\cf6 2019\cf5 ;
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 8\cf5 ].\cf4 plate\cf5 ,\cf7 "PKX-8744"\cf5 );
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 sortList\cf5 ();
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 9\cf5 ].\cf4 brand\cf5 ,\cf7 "RENAULT"\cf5 );
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 9\cf5 ].\cf4 model\cf5 ,\cf7 "DUSTER"\cf5 );
\par \cf3 	\cf4 veiculo\cf5 [\cf6 9\cf5 ].\cf4 year\cf5 =\cf6 2016\cf5 ;
\par \cf3 	\cf4 strcpy\cf5 (\cf4 veiculo\cf5 [\cf6 9\cf5 ].\cf4 plate\cf5 ,\cf7 "FBM-8547"\cf5 );
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 sortList\cf5 ();
\par \cf3 	\cf0\i //
\par \i0\cf3 	
\par \cf5 \}
\par 
\par \cf2 void\cf3  \cf4 listByYear\cf5 (\cf2 int\cf3  \cf4 ano\cf5 )
\par \{
\par \cf3 		\cf4 printf\cf5 (\cf7 "\\n === Lista a partir do ano %d ===\\n"\cf5 ,\cf4 ano\cf5 );
\par \cf3 	\cf2 for\cf3  \cf5 (\cf4 i\cf5 =\cf6 0\cf5 ;\cf4 i\cf5 <\cf6 10\cf5 ;\cf4 i\cf5 ++)\{
\par \cf3 		\cf2 if\cf3  \cf5 (\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 year\cf3  \cf5 >=\cf3  \cf4 ano\cf5 )
\par \cf3 		\cf5 \{
\par \cf3 			\cf4 printf\cf5 (\cf7 "\\n===== Veiculo %d =====\\n"\cf5 ,\cf4 i\cf5 +\cf6 1\cf5 );
\par \cf3 			\cf4 printf\cf5 (\cf7 "\\n Fabricante : %s"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 brand\cf5 );
\par \cf3 			\cf4 printf\cf5 (\cf7 "\\n Modelo : %s"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 model\cf5 );
\par \cf3 			\cf4 printf\cf5 (\cf7 "\\n Ano : %d"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 year\cf5 );
\par \cf3 			\cf4 printf\cf5 (\cf7 "\\n Placa : %s\\n"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 plate\cf5 );
\par \cf3 		\cf5 \}
\par \cf3 		
\par 	\cf5 \}
\par \}
\par 
\par \cf2 void\cf3  \cf4 listByModel\cf5 (\cf2 char\cf3  \cf4 modelo\cf5 [])
\par \{
\par \cf3 		\cf2 int\cf3  \cf4 aux\cf5 ;
\par \cf3 		\cf4 printf\cf5 (\cf7 "\\n === Lista veiculos modelo %s ===\\n"\cf5 ,\cf4 modelo\cf5 );
\par \cf3 	\cf2 for\cf3  \cf5 (\cf4 i\cf5 =\cf6 0\cf5 ;\cf4 i\cf5 <\cf6 10\cf5 ;\cf4 i\cf5 ++)\{
\par \cf3 		\cf4 modelSelect\cf5 =\cf4 strcmp\cf5 (\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 model\cf5 ,\cf3  \cf4 modelo\cf5 );
\par \cf3 		\cf0\i //
\par \i0\cf3 		\cf0\i /*
\par 		//Precisei realizar a analise de porque o list by model nao funcionava
\par 		printf("\\n %s", veiculo[i].model);
\par 		
\par 		aux=strlen(veiculo[i].model);		//num caract 
\par 		printf("%d",aux);
\par 		printf("\\n %s", modelo);
\par 		aux=strlen(modelo);					//num caract variavel de entrada
\par 		printf("%d",aux);
\par 		*/
\par \i0\cf3 		\cf0\i //
\par \i0\cf3 		\cf2 if\cf3  \cf5 (\cf4 modelSelect\cf5 ==\cf6 0\cf5 )
\par \cf3 		\cf5 \{
\par \cf3 			\cf4 printf\cf5 (\cf7 "\\n===== Veiculo %d =====\\n"\cf5 ,\cf4 i\cf5 +\cf6 1\cf5 );
\par \cf3 			\cf4 printf\cf5 (\cf7 "\\n Fabricante : %s"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 brand\cf5 );
\par \cf3 			\cf4 printf\cf5 (\cf7 "\\n Modelo : %s"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 model\cf5 );
\par \cf3 			\cf4 printf\cf5 (\cf7 "\\n Ano : %d"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 year\cf5 );
\par \cf3 			\cf4 printf\cf5 (\cf7 "\\n Placa : %s\\n"\cf5 ,\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 plate\cf5 );
\par \cf3 		\cf5 \}
\par \cf3 		
\par 	\cf5 \}
\par \}
\par 
\par \cf2 void\cf3  \cf4 menu\cf3  \cf5 (\cf2 void\cf5 )
\par \{
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf0\i //Laco para deixar todos os campos year com valores 9999
\par \i0\cf3 	\cf0\i //Para que o sort não encontre lixo e deixe tudo em ordem
\par \i0\cf3 	\cf2 for\cf5 (\cf4 i\cf5 =\cf6 0\cf5 ;\cf4 i\cf5 <\cf6 10\cf5 ;\cf4 i\cf5 ++)
\par \cf3 	\cf5 \{
\par \cf3 		\cf4 veiculo\cf5 [\cf4 i\cf5 ].\cf4 year\cf5 =\cf6 9999\cf5 ;
\par \cf3 	\cf5 \}
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 printf\cf5 (\cf7 "\\n === Selecione uma opcao ===\\n"\cf5 );
\par \cf3 	\cf4 printf\cf5 (\cf7 "\\n 1 - Inserir novo veiculo   \\n"\cf5 );
\par \cf3 	\cf4 printf\cf5 (\cf7 "\\n 2 - Inserir veiculos automaticamente\\n"\cf5 );
\par \cf3 	\cf4 printf\cf5 (\cf7 "\\n 3 - Listar veiculos\\n"\cf5 );
\par \cf3 	\cf4 printf\cf5 (\cf7 "\\n 4 - Listar veiculos com filtro por ano\\n"\cf5 );
\par \cf3 	\cf4 printf\cf5 (\cf7 "\\n 5 - Listar veiculos com filtro por modelo\\n"\cf5 );
\par \cf3 	\cf4 printf\cf5 (\cf7 "\\n 6 - Sair\\n"\cf5 );
\par \cf3 	\cf0\i //
\par \i0\cf3 	\cf4 scanf\cf5 (\cf7 "%d"\cf5 ,\cf3  \cf5 &\cf4 opcao\cf5 );
\par \cf3 	
\par 	\cf2 switch\cf5 (\cf4 opcao\cf5 )
\par \cf3 	\cf5 \{
\par \cf3 		\cf2 case\cf3  \cf6 1\cf5 :
\par \cf3 			\cf4 insert\cf5 ();
\par \cf3 			\cf2 break\cf5 ;
\par \cf3 		\cf2 case\cf3  \cf6 2\cf5 :
\par \cf3 			\cf4 populate\cf5 ();
\par \cf3 			\cf4 printf\cf5 (\cf7 "\\nVeiculos inseirdos com sucesso.\\n"\cf5 );
\par \cf3 			\cf2 break\cf5 ;
\par \cf3 		\cf2 case\cf3  \cf6 3\cf5 :
\par \cf3 			\cf4 list\cf5 ();
\par \cf3 			\cf2 break\cf5 ;
\par \cf3 		\cf2 case\cf3  \cf6 4\cf5 :
\par \cf3 			\cf4 printf\cf5 (\cf7 "Insira o ano: "\cf5 );
\par \cf3 			\cf4 scanf\cf5 (\cf7 "%d"\cf5 ,\cf3  \cf5 &\cf4 ano\cf5 );
\par \cf3 			\cf4 listByYear\cf5 (\cf4 ano\cf5 );
\par \cf3 			\cf2 break\cf5 ;
\par \cf3 		\cf2 case\cf3  \cf6 5\cf5 :
\par \cf3 			\cf4 printf\cf5 (\cf7 "Modelo: "\cf5 );
\par \cf3 			\cf0\i //fflush(stdin);
\par \i0\cf3 			\cf0\i //fgets(modelo,50,stdin);
\par \i0\cf3 			\cf4 scanf\cf5 (\cf7 "%s"\cf5 ,\cf4 modelo\cf5 );\cf3 			\cf0\i //Apenas com scanf deu certo, fgets inclui um caracter a mais (lf??)
\par \i0\cf3 			\cf0\i //modelo = toupper(modelo);
\par \i0\cf3 			\cf4 listByModel\cf5 (\cf4 modelo\cf5 );
\par \cf3 			\cf2 break\cf5 ;
\par \cf3 		\cf2 case\cf3  \cf6 6\cf5 :
\par \cf3 			\cf4 close\cf5 =\cf6 1\cf5 ;
\par \cf3 	\cf5 \}
\par \cf3 		
\par \cf5 \}
\par 
\par \cf2 void\cf3  \cf4 main\cf5 (\cf2 void\cf5 )\cf3  \cf5 \{\cf3 				\cf0\i //Funcao main
\par 
\par \i0\cf3 	\cf2 while\cf3  \cf5 (\cf4 close\cf5 ==\cf6 0\cf5 )
\par \cf3 	\cf5 \{
\par \cf3 		\cf4 menu\cf5 ();
\par \cf3 	\cf5 \}
\par 
\par \}\cf0\i //main
\par 
\par }